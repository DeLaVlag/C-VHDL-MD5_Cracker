// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef XMD5_HASHER_H
#define XMD5_HASHER_H

#ifdef __cplusplus
extern "C" {
#endif

/***************************** Include Files *********************************/
#ifndef __linux__
#include "xil_types.h"
#include "xil_assert.h"
#include "xstatus.h"
#include "xil_io.h"
#else
#include <stdint.h>
#include <assert.h>
#include <dirent.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/mman.h>
#include <unistd.h>
#include <stddef.h>
#endif
#include "xmd5_hasher_hw.h"

/**************************** Type Definitions ******************************/
#ifdef __linux__
typedef uint8_t u8;
typedef uint16_t u16;
typedef uint32_t u32;
#else
typedef struct {
    u16 DeviceId;
    u32 Axilites_BaseAddress;
} XMd5_hasher_Config;
#endif

typedef struct {
    u32 Axilites_BaseAddress;
    u32 IsReady;
} XMd5_hasher;

/***************** Macros (Inline Functions) Definitions *********************/
#ifndef __linux__
#define XMd5_hasher_WriteReg(BaseAddress, RegOffset, Data) \
    Xil_Out32((BaseAddress) + (RegOffset), (u32)(Data))
#define XMd5_hasher_ReadReg(BaseAddress, RegOffset) \
    Xil_In32((BaseAddress) + (RegOffset))
#else
#define XMd5_hasher_WriteReg(BaseAddress, RegOffset, Data) \
    *(volatile u32*)((BaseAddress) + (RegOffset)) = (u32)(Data)
#define XMd5_hasher_ReadReg(BaseAddress, RegOffset) \
    *(volatile u32*)((BaseAddress) + (RegOffset))

#define Xil_AssertVoid(expr)    assert(expr)
#define Xil_AssertNonvoid(expr) assert(expr)

#define XST_SUCCESS             0
#define XST_DEVICE_NOT_FOUND    2
#define XST_OPEN_DEVICE_FAILED  3
#define XIL_COMPONENT_IS_READY  1
#endif

/************************** Function Prototypes *****************************/
#ifndef __linux__
int XMd5_hasher_Initialize(XMd5_hasher *InstancePtr, u16 DeviceId);
XMd5_hasher_Config* XMd5_hasher_LookupConfig(u16 DeviceId);
int XMd5_hasher_CfgInitialize(XMd5_hasher *InstancePtr, XMd5_hasher_Config *ConfigPtr);
#else
int XMd5_hasher_Initialize(XMd5_hasher *InstancePtr, const char* InstanceName);
int XMd5_hasher_Release(XMd5_hasher *InstancePtr);
#endif

void XMd5_hasher_Start(XMd5_hasher *InstancePtr);
u32 XMd5_hasher_IsDone(XMd5_hasher *InstancePtr);
u32 XMd5_hasher_IsIdle(XMd5_hasher *InstancePtr);
u32 XMd5_hasher_IsReady(XMd5_hasher *InstancePtr);
void XMd5_hasher_EnableAutoRestart(XMd5_hasher *InstancePtr);
void XMd5_hasher_DisableAutoRestart(XMd5_hasher *InstancePtr);

void XMd5_hasher_Set_msgC(XMd5_hasher *InstancePtr, u32 Data);
u32 XMd5_hasher_Get_msgC(XMd5_hasher *InstancePtr);
u32 XMd5_hasher_Get_x_BaseAddress(XMd5_hasher *InstancePtr);
u32 XMd5_hasher_Get_x_HighAddress(XMd5_hasher *InstancePtr);
u32 XMd5_hasher_Get_x_TotalBytes(XMd5_hasher *InstancePtr);
u32 XMd5_hasher_Get_x_BitWidth(XMd5_hasher *InstancePtr);
u32 XMd5_hasher_Get_x_Depth(XMd5_hasher *InstancePtr);
u32 XMd5_hasher_Write_x_Words(XMd5_hasher *InstancePtr, int offset, int *data, int length);
u32 XMd5_hasher_Read_x_Words(XMd5_hasher *InstancePtr, int offset, int *data, int length);
u32 XMd5_hasher_Write_x_Bytes(XMd5_hasher *InstancePtr, int offset, char *data, int length);
u32 XMd5_hasher_Read_x_Bytes(XMd5_hasher *InstancePtr, int offset, char *data, int length);

void XMd5_hasher_InterruptGlobalEnable(XMd5_hasher *InstancePtr);
void XMd5_hasher_InterruptGlobalDisable(XMd5_hasher *InstancePtr);
void XMd5_hasher_InterruptEnable(XMd5_hasher *InstancePtr, u32 Mask);
void XMd5_hasher_InterruptDisable(XMd5_hasher *InstancePtr, u32 Mask);
void XMd5_hasher_InterruptClear(XMd5_hasher *InstancePtr, u32 Mask);
u32 XMd5_hasher_InterruptGetEnabled(XMd5_hasher *InstancePtr);
u32 XMd5_hasher_InterruptGetStatus(XMd5_hasher *InstancePtr);

#ifdef __cplusplus
}
#endif

#endif
