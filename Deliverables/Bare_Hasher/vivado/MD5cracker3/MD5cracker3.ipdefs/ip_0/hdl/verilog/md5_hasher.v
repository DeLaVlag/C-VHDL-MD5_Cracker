// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="md5_hasher,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=3.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=10.693000,HLS_SYN_LAT=764,HLS_SYN_TPT=none,HLS_SYN_MEM=3,HLS_SYN_DSP=12,HLS_SYN_FF=2178,HLS_SYN_LUT=2328}" *)

module md5_hasher (
        ap_clk,
        ap_rst_n,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 39'd1;
parameter    ap_ST_fsm_state2 = 39'd2;
parameter    ap_ST_fsm_state3 = 39'd4;
parameter    ap_ST_fsm_state4 = 39'd8;
parameter    ap_ST_fsm_state5 = 39'd16;
parameter    ap_ST_fsm_state6 = 39'd32;
parameter    ap_ST_fsm_state7 = 39'd64;
parameter    ap_ST_fsm_state8 = 39'd128;
parameter    ap_ST_fsm_state9 = 39'd256;
parameter    ap_ST_fsm_state10 = 39'd512;
parameter    ap_ST_fsm_state11 = 39'd1024;
parameter    ap_ST_fsm_state12 = 39'd2048;
parameter    ap_ST_fsm_state13 = 39'd4096;
parameter    ap_ST_fsm_state14 = 39'd8192;
parameter    ap_ST_fsm_state15 = 39'd16384;
parameter    ap_ST_fsm_state16 = 39'd32768;
parameter    ap_ST_fsm_state17 = 39'd65536;
parameter    ap_ST_fsm_state18 = 39'd131072;
parameter    ap_ST_fsm_state19 = 39'd262144;
parameter    ap_ST_fsm_state20 = 39'd524288;
parameter    ap_ST_fsm_state21 = 39'd1048576;
parameter    ap_ST_fsm_state22 = 39'd2097152;
parameter    ap_ST_fsm_state23 = 39'd4194304;
parameter    ap_ST_fsm_state24 = 39'd8388608;
parameter    ap_ST_fsm_state25 = 39'd16777216;
parameter    ap_ST_fsm_state26 = 39'd33554432;
parameter    ap_ST_fsm_state27 = 39'd67108864;
parameter    ap_ST_fsm_state28 = 39'd134217728;
parameter    ap_ST_fsm_state29 = 39'd268435456;
parameter    ap_ST_fsm_state30 = 39'd536870912;
parameter    ap_ST_fsm_state31 = 39'd1073741824;
parameter    ap_ST_fsm_state32 = 39'd2147483648;
parameter    ap_ST_fsm_pp0_stage0 = 39'd4294967296;
parameter    ap_ST_fsm_pp0_stage1 = 39'd8589934592;
parameter    ap_ST_fsm_pp0_stage2 = 39'd17179869184;
parameter    ap_ST_fsm_pp0_stage3 = 39'd34359738368;
parameter    ap_ST_fsm_pp0_stage4 = 39'd68719476736;
parameter    ap_ST_fsm_pp0_stage5 = 39'd137438953472;
parameter    ap_ST_fsm_state47 = 39'd274877906944;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 8;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [38:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg   [3:0] x_address0;
reg    x_ce0;
reg    x_we0;
reg   [31:0] x_d0;
wire   [31:0] x_q0;
wire   [7:0] msgC;
reg   [31:0] rnd_seed;
wire   [5:0] k_address0;
reg    k_ce0;
wire   [31:0] k_q0;
wire   [5:0] r_address0;
reg    r_ce0;
wire   [4:0] r_q0;
reg   [6:0] i1_1_reg_246;
reg   [31:0] tmp_5_reg_258;
reg   [31:0] d_1_reg_270;
reg   [31:0] c_1_reg_283;
reg   [31:0] a_1_reg_296;
wire  signed [15:0] grp_fu_313_p4;
reg  signed [15:0] reg_323;
wire    ap_CS_fsm_state2;
wire   [0:0] tmp_s_fu_327_p2;
wire    ap_CS_fsm_state17;
wire   [0:0] tmp_1_9_fu_420_p2;
wire   [3:0] i_1_fu_333_p2;
reg   [3:0] i_1_reg_1103;
wire   [15:0] tmp_13_fu_339_p1;
reg   [15:0] tmp_13_reg_1108;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state8;
wire   [30:0] grp_fu_347_p2;
reg   [30:0] tmp_3_i_cast_reg_1128;
reg   [16:0] tmp_5_i_reg_1133;
(* use_dsp48 = "no" *) wire   [31:0] tmp2_fu_375_p2;
reg   [31:0] tmp2_reg_1138;
wire    ap_CS_fsm_state9;
wire   [31:0] grp_fu_1062_p3;
reg   [31:0] lo_1_reg_1143;
wire    ap_CS_fsm_state11;
reg   [0:0] tmp_18_reg_1149;
(* use_dsp48 = "no" *) wire   [31:0] lo_2_fu_388_p2;
reg   [31:0] lo_2_reg_1154;
wire    ap_CS_fsm_state12;
wire   [31:0] lo_3_fu_393_p3;
reg   [31:0] lo_3_reg_1159;
wire    ap_CS_fsm_state13;
wire   [23:0] tmp_11_fu_408_p1;
reg   [23:0] tmp_11_reg_1165;
wire    ap_CS_fsm_state15;
wire   [3:0] i_1_1_fu_426_p2;
reg   [3:0] i_1_1_reg_1173;
wire   [15:0] tmp_20_fu_432_p1;
reg   [15:0] tmp_20_reg_1178;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state23;
wire   [30:0] grp_fu_440_p2;
reg   [30:0] tmp_3_i1_cast_reg_1198;
reg   [16:0] tmp_5_i1_reg_1203;
(* use_dsp48 = "no" *) wire   [31:0] tmp4_fu_468_p2;
reg   [31:0] tmp4_reg_1208;
wire    ap_CS_fsm_state24;
wire   [31:0] grp_fu_1077_p3;
reg   [31:0] lo_5_reg_1213;
wire    ap_CS_fsm_state26;
reg   [0:0] tmp_21_reg_1219;
(* use_dsp48 = "no" *) wire   [31:0] lo_6_fu_481_p2;
reg   [31:0] lo_6_reg_1224;
wire    ap_CS_fsm_state27;
wire   [31:0] lo_7_fu_486_p3;
reg   [31:0] lo_7_reg_1229;
wire    ap_CS_fsm_state28;
wire   [23:0] tmp_19_fu_501_p1;
reg   [23:0] tmp_19_reg_1235;
wire    ap_CS_fsm_state30;
wire   [0:0] exitcond_1_fu_513_p2;
reg   [0:0] exitcond_1_reg_1240;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state33_pp0_stage0_iter0;
wire    ap_block_state39_pp0_stage0_iter1;
wire    ap_block_state45_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] ap_reg_pp0_iter1_exitcond_1_reg_1240;
reg   [0:0] ap_reg_pp0_iter2_exitcond_1_reg_1240;
wire   [3:0] tmp_26_fu_519_p1;
reg   [3:0] tmp_26_reg_1244;
wire   [3:0] p_shl_1_fu_527_p3;
reg   [3:0] p_shl_1_reg_1250;
wire   [3:0] tmp_12_fu_535_p2;
reg   [3:0] tmp_12_reg_1255;
wire   [3:0] tmp_7_fu_541_p2;
reg   [3:0] tmp_7_reg_1260;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state34_pp0_stage1_iter0;
wire    ap_block_state40_pp0_stage1_iter1;
wire    ap_block_state46_pp0_stage1_iter2;
wire    ap_block_pp0_stage1_11001;
wire   [3:0] tmp_15_fu_558_p2;
reg   [3:0] tmp_15_reg_1265;
wire   [3:0] tmp_16_fu_563_p2;
reg   [3:0] tmp_16_reg_1270;
wire   [3:0] tmp_37_1_cast_fu_578_p2;
reg   [3:0] tmp_37_1_cast_reg_1275;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state35_pp0_stage2_iter0;
wire    ap_block_state41_pp0_stage2_iter1;
wire    ap_block_pp0_stage2_11001;
wire   [0:0] sel_tmp_fu_582_p2;
reg   [0:0] sel_tmp_reg_1280;
wire   [0:0] sel_tmp2_fu_588_p2;
reg   [0:0] sel_tmp2_reg_1285;
wire   [0:0] sel_tmp6_fu_600_p2;
reg   [0:0] sel_tmp6_reg_1291;
wire   [0:0] or_cond_fu_606_p2;
reg   [0:0] or_cond_reg_1297;
wire   [3:0] tmp_17_fu_612_p3;
reg   [3:0] tmp_17_reg_1304;
wire   [0:0] or_cond2_fu_646_p2;
reg   [0:0] or_cond2_reg_1309;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state36_pp0_stage3_iter0;
wire    ap_block_state42_pp0_stage3_iter1;
wire    ap_block_pp0_stage3_11001;
wire   [5:0] newSel2_fu_651_p3;
reg   [5:0] newSel2_reg_1314;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state37_pp0_stage4_iter0;
wire    ap_block_state43_pp0_stage4_iter1;
wire    ap_block_pp0_stage4_11001;
wire   [6:0] i_3_1_fu_669_p2;
reg   [6:0] i_3_1_reg_1334;
wire    ap_CS_fsm_pp0_stage5;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state38_pp0_stage5_iter0;
wire    ap_block_state44_pp0_stage5_iter1;
wire    ap_block_pp0_stage5_11001;
reg   [31:0] x_load_2_reg_1339;
reg   [31:0] k_load_reg_1344;
reg   [4:0] r_load_reg_1349;
wire   [31:0] tmp14_fu_675_p2;
reg   [31:0] tmp14_reg_1355;
wire   [5:0] tmp_50_1_fu_682_p2;
reg   [5:0] tmp_50_1_reg_1360;
wire   [31:0] t_function_4_1_fu_788_p2;
wire   [31:0] b_1_fu_817_p2;
reg    ap_enable_reg_pp0_iter2;
wire    ap_CS_fsm_state32;
wire    ap_block_pp0_stage5_subdone;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage1_subdone;
reg    ap_condition_pp0_exit_iter1_state40;
reg   [3:0] i_reg_222;
wire    ap_CS_fsm_state14;
reg   [3:0] i_s_reg_234;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state29;
reg   [6:0] ap_phi_mux_i1_1_phi_fu_250_p4;
wire    ap_block_pp0_stage0;
reg   [31:0] ap_phi_mux_tmp_5_phi_fu_262_p4;
wire    ap_block_pp0_stage1;
reg   [31:0] ap_phi_mux_d_1_phi_fu_275_p4;
reg   [31:0] ap_phi_mux_c_1_phi_fu_288_p4;
reg   [31:0] ap_phi_mux_a_1_phi_fu_300_p4;
wire   [63:0] tmp_4_fu_403_p1;
wire   [63:0] tmp_4_1_fu_496_p1;
wire   [63:0] tmp_45_1_fu_659_p1;
wire    ap_block_pp0_stage4;
wire   [63:0] tmp_46_1_fu_663_p1;
wire    ap_CS_fsm_state47;
wire   [31:0] tmp_2_fu_412_p3;
wire    ap_CS_fsm_state31;
wire   [31:0] tmp_2_1_fu_505_p3;
wire  signed [31:0] grp_fu_1055_p2;
wire   [31:0] tmp_6_fu_372_p1;
wire   [31:0] tmp_4_i_cast_fu_369_p1;
wire  signed [31:0] grp_fu_1070_p2;
wire   [31:0] tmp_10_fu_465_p1;
wire   [31:0] tmp_4_i1_cast_fu_462_p1;
wire   [1:0] tmp_28_fu_523_p1;
wire   [0:0] tmp_29_fu_546_p1;
wire   [3:0] tmp_14_fu_550_p3;
wire    ap_block_pp0_stage2;
wire   [1:0] tmp_27_1_cast_fu_568_p4;
wire   [0:0] sel_tmp4_fu_594_p2;
wire    ap_block_pp0_stage3;
wire   [5:0] tmp_27_fu_618_p1;
wire   [5:0] t_number_1_1_cast_fu_622_p1;
wire   [5:0] newSel_fu_625_p3;
wire   [5:0] newSel25_cast_fu_632_p1;
wire   [0:0] or_cond1_fu_635_p2;
wire   [5:0] newSel1_fu_639_p3;
wire    ap_block_pp0_stage5;
wire   [5:0] r_load_cast1_fu_679_p1;
wire   [31:0] tmp_31_1_fu_694_p2;
wire   [31:0] tmp_32_1_fu_700_p2;
wire   [31:0] tmp_30_1_fu_688_p2;
wire   [31:0] tmp_34_1_fu_718_p2;
wire   [31:0] tmp_33_1_fu_712_p2;
wire   [31:0] tmp_35_1_fu_724_p2;
wire   [31:0] t_function_s_fu_706_p2;
wire   [31:0] t_function_1_1_fu_730_p2;
wire   [31:0] tmp11_fu_736_p2;
wire   [31:0] tmp_42_1_fu_742_p2;
wire   [31:0] newSel33_v_fu_755_p3;
wire   [31:0] newSel3_fu_748_p3;
wire   [31:0] newSel4_fu_762_p2;
wire   [31:0] newSel5_fu_768_p3;
wire   [31:0] newSel6_fu_775_p3;
wire   [31:0] tmp15_fu_782_p2;
wire   [31:0] grp_fu_796_p1;
wire   [31:0] grp_fu_805_p1;
wire   [31:0] grp_fu_805_p2;
wire   [31:0] grp_fu_796_p2;
wire   [31:0] t_function_5_1_fu_811_p2;
wire   [15:0] grp_fu_1055_p0;
wire   [15:0] grp_fu_1062_p0;
wire   [15:0] grp_fu_1062_p1;
wire    ap_CS_fsm_state10;
wire   [15:0] grp_fu_1070_p0;
wire   [15:0] grp_fu_1077_p0;
wire   [15:0] grp_fu_1077_p1;
wire    ap_CS_fsm_state25;
reg   [38:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_pp0_stage3_subdone;
wire    ap_block_pp0_stage4_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [31:0] grp_fu_1062_p10;
wire   [31:0] grp_fu_1077_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 39'd1;
#0 rnd_seed = 32'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

md5_hasher_k #(
    .DataWidth( 32 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
k_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(k_address0),
    .ce0(k_ce0),
    .q0(k_q0)
);

md5_hasher_r #(
    .DataWidth( 5 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
r_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(r_address0),
    .ce0(r_ce0),
    .q0(r_q0)
);

md5_hasher_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
md5_hasher_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .x_address0(x_address0),
    .x_ce0(x_ce0),
    .x_we0(x_we0),
    .x_d0(x_d0),
    .x_q0(x_q0),
    .msgC(msgC)
);

md5_hasher_mul_31bkb #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 31 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 31 ))
md5_hasher_mul_31bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(31'd1101463552),
    .din1(grp_fu_313_p4),
    .ce(1'b1),
    .dout(grp_fu_347_p2)
);

md5_hasher_mul_31bkb #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 31 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 31 ))
md5_hasher_mul_31bkb_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(31'd1101463552),
    .din1(grp_fu_313_p4),
    .ce(1'b1),
    .dout(grp_fu_440_p2)
);

md5_hasher_shl_32cud #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .OP( 0 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 5 ),
    .dout_WIDTH( 32 ))
md5_hasher_shl_32cud_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(t_function_4_1_fu_788_p2),
    .din1(grp_fu_796_p1),
    .ce(1'b1),
    .dout(grp_fu_796_p2)
);

md5_hasher_lshr_3dEe #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .OP( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 6 ),
    .dout_WIDTH( 32 ))
md5_hasher_lshr_3dEe_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(t_function_4_1_fu_788_p2),
    .din1(grp_fu_805_p1),
    .ce(1'b1),
    .dout(grp_fu_805_p2)
);

md5_hasher_mul_mueOg #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
md5_hasher_mul_mueOg_U5(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_1055_p0),
    .din1(reg_323),
    .ce(1'b1),
    .dout(grp_fu_1055_p2)
);

md5_hasher_mac_mufYi #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
md5_hasher_mac_mufYi_U6(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_1062_p0),
    .din1(grp_fu_1062_p1),
    .din2(tmp2_reg_1138),
    .ce(1'b1),
    .dout(grp_fu_1062_p3)
);

md5_hasher_mul_mueOg #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
md5_hasher_mul_mueOg_U7(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_1070_p0),
    .din1(reg_323),
    .ce(1'b1),
    .dout(grp_fu_1070_p2)
);

md5_hasher_mac_mufYi #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
md5_hasher_mac_mufYi_U8(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_1077_p0),
    .din1(grp_fu_1077_p1),
    .din2(tmp4_reg_1208),
    .ce(1'b1),
    .dout(grp_fu_1077_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage5_subdone) & (exitcond_1_reg_1240 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state32)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage5_subdone) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state32) | ((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_condition_pp0_exit_iter1_state40) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter1_state40) & (((1'b0 == ap_block_pp0_stage5_subdone) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter0;
        end else if ((((1'b0 == ap_block_pp0_stage5_subdone) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state32)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_reg_pp0_iter2_exitcond_1_reg_1240 == 1'd0))) begin
        a_1_reg_296 <= tmp_5_reg_258;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        a_1_reg_296 <= 32'd1732584193;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_reg_pp0_iter2_exitcond_1_reg_1240 == 1'd0))) begin
        c_1_reg_283 <= b_1_fu_817_p2;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        c_1_reg_283 <= 32'd4023233417;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_reg_pp0_iter2_exitcond_1_reg_1240 == 1'd0))) begin
        d_1_reg_270 <= c_1_reg_283;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        d_1_reg_270 <= 32'd2562383102;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_1_reg_1240 == 1'd0))) begin
        i1_1_reg_246 <= i_3_1_reg_1334;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        i1_1_reg_246 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        i_reg_222 <= i_1_reg_1103;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_222 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        i_s_reg_234 <= i_1_1_reg_1173;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        i_s_reg_234 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        rnd_seed <= lo_7_reg_1229;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        rnd_seed <= lo_3_reg_1159;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_reg_pp0_iter2_exitcond_1_reg_1240 == 1'd0))) begin
        tmp_5_reg_258 <= d_1_reg_270;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        tmp_5_reg_258 <= 32'd271733878;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_reg_pp0_iter1_exitcond_1_reg_1240 <= exitcond_1_reg_1240;
        ap_reg_pp0_iter2_exitcond_1_reg_1240 <= ap_reg_pp0_iter1_exitcond_1_reg_1240;
        exitcond_1_reg_1240 <= exitcond_1_fu_513_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        i_1_1_reg_1173 <= i_1_1_fu_426_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_1_reg_1103 <= i_1_fu_333_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        i_3_1_reg_1334 <= i_3_1_fu_669_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5) & (exitcond_1_reg_1240 == 1'd0))) begin
        k_load_reg_1344 <= k_q0;
        r_load_reg_1349 <= r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        lo_1_reg_1143 <= grp_fu_1062_p3;
        tmp_18_reg_1149 <= grp_fu_1062_p3[32'd31];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) & (tmp_18_reg_1149 == 1'd1))) begin
        lo_2_reg_1154 <= lo_2_fu_388_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        lo_3_reg_1159 <= lo_3_fu_393_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        lo_5_reg_1213 <= grp_fu_1077_p3;
        tmp_21_reg_1219 <= grp_fu_1077_p3[32'd31];
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_21_reg_1219 == 1'd1) & (1'b1 == ap_CS_fsm_state27))) begin
        lo_6_reg_1224 <= lo_6_fu_481_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        lo_7_reg_1229 <= lo_7_fu_486_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (exitcond_1_reg_1240 == 1'd0))) begin
        newSel2_reg_1314 <= newSel2_fu_651_p3;
        or_cond2_reg_1309 <= or_cond2_fu_646_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (exitcond_1_reg_1240 == 1'd0))) begin
        or_cond_reg_1297 <= or_cond_fu_606_p2;
        sel_tmp2_reg_1285 <= sel_tmp2_fu_588_p2;
        sel_tmp6_reg_1291 <= sel_tmp6_fu_600_p2;
        sel_tmp_reg_1280 <= sel_tmp_fu_582_p2;
        tmp_17_reg_1304 <= tmp_17_fu_612_p3;
        tmp_37_1_cast_reg_1275 <= tmp_37_1_cast_fu_578_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_1_fu_513_p2 == 1'd0))) begin
        p_shl_1_reg_1250[3 : 2] <= p_shl_1_fu_527_p3[3 : 2];
        tmp_12_reg_1255 <= tmp_12_fu_535_p2;
        tmp_26_reg_1244 <= tmp_26_fu_519_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state17) & (tmp_1_9_fu_420_p2 == 1'd0)) | ((1'b1 == ap_CS_fsm_state2) & (tmp_s_fu_327_p2 == 1'd0)))) begin
        reg_323 <= {{rnd_seed[31:16]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_1_reg_1240 == 1'd0))) begin
        tmp14_reg_1355 <= tmp14_fu_675_p2;
        tmp_50_1_reg_1360 <= tmp_50_1_fu_682_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        tmp2_reg_1138 <= tmp2_fu_375_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        tmp4_reg_1208 <= tmp4_fu_468_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        tmp_11_reg_1165 <= tmp_11_fu_408_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_s_fu_327_p2 == 1'd0))) begin
        tmp_13_reg_1108 <= tmp_13_fu_339_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (exitcond_1_reg_1240 == 1'd0))) begin
        tmp_15_reg_1265 <= tmp_15_fu_558_p2;
        tmp_16_reg_1270 <= tmp_16_fu_563_p2;
        tmp_7_reg_1260 <= tmp_7_fu_541_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        tmp_19_reg_1235 <= tmp_19_fu_501_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state17) & (tmp_1_9_fu_420_p2 == 1'd0))) begin
        tmp_20_reg_1178 <= tmp_20_fu_432_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        tmp_3_i1_cast_reg_1198 <= grp_fu_440_p2;
        tmp_5_i1_reg_1203 <= {{grp_fu_1070_p2[31:15]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        tmp_3_i_cast_reg_1128 <= grp_fu_347_p2;
        tmp_5_i_reg_1133 <= {{grp_fu_1055_p2[31:15]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (exitcond_1_reg_1240 == 1'd0))) begin
        x_load_2_reg_1339 <= x_q0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_condition_pp0_exit_iter1_state40 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter1_state40 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_reg_pp0_iter2_exitcond_1_reg_1240 == 1'd0))) begin
        ap_phi_mux_a_1_phi_fu_300_p4 = tmp_5_reg_258;
    end else begin
        ap_phi_mux_a_1_phi_fu_300_p4 = a_1_reg_296;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_reg_pp0_iter2_exitcond_1_reg_1240 == 1'd0))) begin
        ap_phi_mux_c_1_phi_fu_288_p4 = b_1_fu_817_p2;
    end else begin
        ap_phi_mux_c_1_phi_fu_288_p4 = c_1_reg_283;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_reg_pp0_iter2_exitcond_1_reg_1240 == 1'd0))) begin
        ap_phi_mux_d_1_phi_fu_275_p4 = c_1_reg_283;
    end else begin
        ap_phi_mux_d_1_phi_fu_275_p4 = d_1_reg_270;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_1_reg_1240 == 1'd0))) begin
        ap_phi_mux_i1_1_phi_fu_250_p4 = i_3_1_reg_1334;
    end else begin
        ap_phi_mux_i1_1_phi_fu_250_p4 = i1_1_reg_246;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_reg_pp0_iter2_exitcond_1_reg_1240 == 1'd0))) begin
        ap_phi_mux_tmp_5_phi_fu_262_p4 = d_1_reg_270;
    end else begin
        ap_phi_mux_tmp_5_phi_fu_262_p4 = tmp_5_reg_258;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        k_ce0 = 1'b1;
    end else begin
        k_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        r_ce0 = 1'b1;
    end else begin
        r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        x_address0 = tmp_45_1_fu_659_p1;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        x_address0 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        x_address0 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        x_address0 = tmp_4_1_fu_496_p1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        x_address0 = tmp_4_fu_403_p1;
    end else if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state2))) begin
        x_address0 = 64'd13;
    end else begin
        x_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state2) | ((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)))) begin
        x_ce0 = 1'b1;
    end else begin
        x_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        x_d0 = tmp_2_1_fu_505_p3;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        x_d0 = 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        x_d0 = 32'd440;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        x_d0 = lo_7_reg_1229;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        x_d0 = tmp_2_fu_412_p3;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        x_d0 = lo_3_reg_1159;
    end else begin
        x_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state30))) begin
        x_we0 = 1'b1;
    end else begin
        x_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (tmp_s_fu_327_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            if (((1'b1 == ap_CS_fsm_state17) & (tmp_1_9_fu_420_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_state33_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state40_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state41_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state42_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state43_pp0_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state44_pp0_stage5_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state45_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state46_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign b_1_fu_817_p2 = (t_function_5_1_fu_811_p2 + c_1_reg_283);

assign exitcond_1_fu_513_p2 = ((ap_phi_mux_i1_1_phi_fu_250_p4 == 7'd64) ? 1'b1 : 1'b0);

assign grp_fu_1055_p0 = 32'd16807;

assign grp_fu_1062_p0 = 32'd16807;

assign grp_fu_1062_p1 = grp_fu_1062_p10;

assign grp_fu_1062_p10 = tmp_13_reg_1108;

assign grp_fu_1070_p0 = 32'd16807;

assign grp_fu_1077_p0 = 32'd16807;

assign grp_fu_1077_p1 = grp_fu_1077_p10;

assign grp_fu_1077_p10 = tmp_20_reg_1178;

assign grp_fu_313_p4 = {{rnd_seed[31:16]}};

assign grp_fu_796_p1 = r_load_reg_1349;

assign grp_fu_805_p1 = tmp_50_1_reg_1360;

assign i_1_1_fu_426_p2 = (i_s_reg_234 + 4'd1);

assign i_1_fu_333_p2 = (i_reg_222 + 4'd1);

assign i_3_1_fu_669_p2 = (i1_1_reg_246 + 7'd1);

assign k_address0 = tmp_46_1_fu_663_p1;

assign lo_2_fu_388_p2 = ($signed(32'd2147483649) + $signed(lo_1_reg_1143));

assign lo_3_fu_393_p3 = ((tmp_18_reg_1149[0:0] === 1'b1) ? lo_2_reg_1154 : lo_1_reg_1143);

assign lo_6_fu_481_p2 = ($signed(32'd2147483649) + $signed(lo_5_reg_1213));

assign lo_7_fu_486_p3 = ((tmp_21_reg_1219[0:0] === 1'b1) ? lo_6_reg_1224 : lo_5_reg_1213);

assign newSel1_fu_639_p3 = ((or_cond_reg_1297[0:0] === 1'b1) ? newSel_fu_625_p3 : newSel25_cast_fu_632_p1);

assign newSel25_cast_fu_632_p1 = tmp_17_reg_1304;

assign newSel2_fu_651_p3 = ((or_cond2_fu_646_p2[0:0] === 1'b1) ? newSel1_fu_639_p3 : 6'd0);

assign newSel33_v_fu_755_p3 = ((sel_tmp2_reg_1285[0:0] === 1'b1) ? tmp11_fu_736_p2 : tmp_42_1_fu_742_p2);

assign newSel3_fu_748_p3 = ((sel_tmp6_reg_1291[0:0] === 1'b1) ? t_function_s_fu_706_p2 : t_function_1_1_fu_730_p2);

assign newSel4_fu_762_p2 = (newSel33_v_fu_755_p3 ^ ap_phi_mux_d_1_phi_fu_275_p4);

assign newSel5_fu_768_p3 = ((or_cond_reg_1297[0:0] === 1'b1) ? newSel3_fu_748_p3 : newSel4_fu_762_p2);

assign newSel6_fu_775_p3 = ((or_cond2_reg_1309[0:0] === 1'b1) ? newSel5_fu_768_p3 : 32'd0);

assign newSel_fu_625_p3 = ((sel_tmp6_reg_1291[0:0] === 1'b1) ? tmp_27_fu_618_p1 : t_number_1_1_cast_fu_622_p1);

assign or_cond1_fu_635_p2 = (sel_tmp_reg_1280 | sel_tmp2_reg_1285);

assign or_cond2_fu_646_p2 = (or_cond_reg_1297 | or_cond1_fu_635_p2);

assign or_cond_fu_606_p2 = (sel_tmp6_fu_600_p2 | sel_tmp4_fu_594_p2);

assign p_shl_1_fu_527_p3 = {{tmp_28_fu_523_p1}, {2'd0}};

assign r_address0 = tmp_46_1_fu_663_p1;

assign r_load_cast1_fu_679_p1 = r_load_reg_1349;

assign sel_tmp2_fu_588_p2 = ((tmp_27_1_cast_fu_568_p4 == 2'd2) ? 1'b1 : 1'b0);

assign sel_tmp4_fu_594_p2 = ((tmp_27_1_cast_fu_568_p4 == 2'd1) ? 1'b1 : 1'b0);

assign sel_tmp6_fu_600_p2 = ((tmp_27_1_cast_fu_568_p4 == 2'd0) ? 1'b1 : 1'b0);

assign sel_tmp_fu_582_p2 = ((tmp_27_1_cast_fu_568_p4 == 2'd3) ? 1'b1 : 1'b0);

assign t_function_1_1_fu_730_p2 = (tmp_35_1_fu_724_p2 | tmp_33_1_fu_712_p2);

assign t_function_4_1_fu_788_p2 = (tmp15_fu_782_p2 + tmp14_reg_1355);

assign t_function_5_1_fu_811_p2 = (grp_fu_805_p2 | grp_fu_796_p2);

assign t_function_s_fu_706_p2 = (tmp_32_1_fu_700_p2 | tmp_30_1_fu_688_p2);

assign t_number_1_1_cast_fu_622_p1 = tmp_37_1_cast_reg_1275;

assign tmp11_fu_736_p2 = (ap_phi_mux_tmp_5_phi_fu_262_p4 ^ ap_phi_mux_c_1_phi_fu_288_p4);

assign tmp14_fu_675_p2 = (x_load_2_reg_1339 + k_load_reg_1344);

assign tmp15_fu_782_p2 = (newSel6_fu_775_p3 + ap_phi_mux_a_1_phi_fu_300_p4);

assign tmp2_fu_375_p2 = (tmp_6_fu_372_p1 + tmp_4_i_cast_fu_369_p1);

assign tmp4_fu_468_p2 = (tmp_10_fu_465_p1 + tmp_4_i1_cast_fu_462_p1);

assign tmp_10_fu_465_p1 = tmp_5_i1_reg_1203;

assign tmp_11_fu_408_p1 = x_q0[23:0];

assign tmp_12_fu_535_p2 = (p_shl_1_fu_527_p3 - tmp_26_fu_519_p1);

assign tmp_13_fu_339_p1 = rnd_seed[15:0];

assign tmp_14_fu_550_p3 = {{tmp_29_fu_546_p1}, {3'd0}};

assign tmp_15_fu_558_p2 = (4'd5 + tmp_12_reg_1255);

assign tmp_16_fu_563_p2 = (tmp_14_fu_550_p3 - tmp_26_reg_1244);

assign tmp_17_fu_612_p3 = ((sel_tmp2_fu_588_p2[0:0] === 1'b1) ? tmp_15_reg_1265 : tmp_16_reg_1270);

assign tmp_19_fu_501_p1 = x_q0[23:0];

assign tmp_1_9_fu_420_p2 = ((i_s_reg_234 == 4'd14) ? 1'b1 : 1'b0);

assign tmp_20_fu_432_p1 = rnd_seed[15:0];

assign tmp_26_fu_519_p1 = ap_phi_mux_i1_1_phi_fu_250_p4[3:0];

assign tmp_27_1_cast_fu_568_p4 = {{i1_1_reg_246[5:4]}};

assign tmp_27_fu_618_p1 = i1_1_reg_246[5:0];

assign tmp_28_fu_523_p1 = ap_phi_mux_i1_1_phi_fu_250_p4[1:0];

assign tmp_29_fu_546_p1 = i1_1_reg_246[0:0];

assign tmp_2_1_fu_505_p3 = {{8'd128}, {tmp_19_reg_1235}};

assign tmp_2_fu_412_p3 = {{8'd128}, {tmp_11_reg_1165}};

assign tmp_30_1_fu_688_p2 = (ap_phi_mux_d_1_phi_fu_275_p4 & ap_phi_mux_c_1_phi_fu_288_p4);

assign tmp_31_1_fu_694_p2 = (ap_phi_mux_c_1_phi_fu_288_p4 ^ 32'd4294967295);

assign tmp_32_1_fu_700_p2 = (tmp_31_1_fu_694_p2 & ap_phi_mux_tmp_5_phi_fu_262_p4);

assign tmp_33_1_fu_712_p2 = (ap_phi_mux_tmp_5_phi_fu_262_p4 & ap_phi_mux_c_1_phi_fu_288_p4);

assign tmp_34_1_fu_718_p2 = (ap_phi_mux_tmp_5_phi_fu_262_p4 ^ 32'd4294967295);

assign tmp_35_1_fu_724_p2 = (tmp_34_1_fu_718_p2 & ap_phi_mux_d_1_phi_fu_275_p4);

assign tmp_37_1_cast_fu_578_p2 = (tmp_7_reg_1260 + p_shl_1_reg_1250);

assign tmp_42_1_fu_742_p2 = (tmp_34_1_fu_718_p2 | ap_phi_mux_c_1_phi_fu_288_p4);

assign tmp_45_1_fu_659_p1 = newSel2_reg_1314;

assign tmp_46_1_fu_663_p1 = i1_1_reg_246;

assign tmp_4_1_fu_496_p1 = i_s_reg_234;

assign tmp_4_fu_403_p1 = i_reg_222;

assign tmp_4_i1_cast_fu_462_p1 = tmp_3_i1_cast_reg_1198;

assign tmp_4_i_cast_fu_369_p1 = tmp_3_i_cast_reg_1128;

assign tmp_50_1_fu_682_p2 = ($signed(6'd32) - $signed(r_load_cast1_fu_679_p1));

assign tmp_6_fu_372_p1 = tmp_5_i_reg_1133;

assign tmp_7_fu_541_p2 = (4'd1 + tmp_26_reg_1244);

assign tmp_s_fu_327_p2 = ((i_reg_222 == 4'd14) ? 1'b1 : 1'b0);

always @ (posedge ap_clk) begin
    p_shl_1_reg_1250[1:0] <= 2'b00;
end

endmodule //md5_hasher
